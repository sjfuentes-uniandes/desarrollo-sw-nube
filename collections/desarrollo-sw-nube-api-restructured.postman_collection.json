{
	"info": {
		"_postman_id": "desarrollo-sw-nube-api-restructured",
		"name": "Desarrollo SW Nube API - Restructured",
		"description": "# API de Autenticaci√≥n de Usuarios\n\n## Descripci√≥n\nAPI REST desarrollada con **FastAPI** que permite registro y autenticaci√≥n segura de usuarios.\n\n### Caracter√≠sticas\n- üîê Registro seguro de usuarios\n- üîë Autenticaci√≥n JWT\n- üõ°Ô∏è Encriptaci√≥n bcrypt\n- üìä Base de datos PostgreSQL\n- üê≥ Contenedorizaci√≥n Docker\n- ‚úÖ Pruebas automatizadas\n\n### Quick Start\n1. **Levantar servicios**: `docker-compose up -d`\n2. **Verificar**: `curl http://localhost/`\n3. **Probar endpoints** en orden: Health Check ‚Üí Signup ‚Üí Login\n\n### Arquitectura\n```\nCliente ‚Üí Nginx (Puerto 80) ‚Üí FastAPI (Puerto 8000) ‚Üí PostgreSQL (Puerto 5432)\n```\n\n### Variables de Entorno\n- `base_url`: URL base de la API (http://localhost)\n- `access_token`: JWT token (se guarda autom√°ticamente)\n\n### Endpoints\n- **GET /** - Health check\n- **POST /api/auth/signup** - Registro de usuario\n- **POST /api/auth/login** - Autenticaci√≥n\n\n## Get Started - Gu√≠a Completa\n\n### Paso 1: Preparar el Entorno\n```bash\n# 1. Clonar el repositorio\ngit clone <repository-url>\ncd desarrollo-sw-nube\n\n# 2. Crear archivo de configuraci√≥n\ntouch .env\n```\n\n### Paso 2: Configurar Variables (.env)\nCopiar este contenido en el archivo `.env`:\n```env\n# Database\nDATABASE_URL=postgresql://postgres:postgres@postgres:5432/desarrollo_sw_nube\nPOSTGRES_DB=desarrollo_sw_nube\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=postgres\n\n# JWT (generar clave segura)\nSECRET_KEY=tu-clave-secreta-de-64-caracteres-aqui\nALGORITHM=HS256\nACCESS_TOKEN_EXPIRE_SECONDS=3600\n```\n\n**Generar SECRET_KEY:**\n```bash\n# Ejecutar uno de estos comandos:\nopenssl rand -hex 32\n# O\npython -c \"import secrets; print(secrets.token_hex(32))\"\n```\n\n### Paso 3: Levantar la Aplicaci√≥n\n```bash\n# Iniciar todos los servicios\ndocker-compose up -d\n\n# Verificar que funciona\ncurl http://localhost/\n# Debe retornar: \"Healthcheck\"\n```\n\n### Paso 4: Probar con Postman\n1. **Importar colecci√≥n**: Usar este archivo JSON\n2. **Importar entorno**: `postman_environment.json`\n3. **Ejecutar requests** en orden:\n   - Health Check\n   - User Signup\n   - User Login\n\n### Paso 5: Pruebas Automatizadas (Opcional)\n```bash\n# Instalar Newman\nnpm install -g newman newman-reporter-html\n\n# Ejecutar todas las pruebas\nnewman run collections/desarrollo-sw-nube-api-restructured.postman_collection.json \\\n  -e collections/postman_environment.json \\\n  --env-var \"base_url=http://localhost\"\n```\n\n## Ejemplos de Uso\n\n### Registro de Usuario\n```bash\ncurl -X POST http://localhost/api/auth/signup \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"first_name\": \"Juan\",\n    \"last_name\": \"P√©rez\",\n    \"email\": \"juan@example.com\",\n    \"city\": \"Bogot√°\",\n    \"country\": \"Colombia\",\n    \"password1\": \"mipassword123\",\n    \"password2\": \"mipassword123\"\n  }'\n```\n\n### Login\n```bash\ncurl -X POST http://localhost/api/auth/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"juan@example.com\",\n    \"password\": \"mipassword123\"\n  }'\n```\n\n## Soluci√≥n de Problemas\n\n### Error 502 Bad Gateway\n```bash\n# Verificar servicios\ndocker-compose ps\n\n# Reiniciar si es necesario\ndocker-compose restart\n```\n\n### Limpiar Base de Datos\n```bash\n# Si hay problemas con usuarios duplicados\ndocker-compose down -v\ndocker-compose up -d\n```\n\n### Puerto 80 Ocupado\n```bash\n# Cambiar puerto en docker-compose.yml\nports:\n  - \"8080:80\"  # Usar puerto 8080\n```",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is healthcheck\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Healthcheck\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				},
				"description": "**Endpoint de verificaci√≥n de estado**\n\nVerifica que la API est√© funcionando correctamente.\n\n### Response\n- **200 OK**: API funcionando\n- **Otros**: Problema con el servicio\n\n### Ejemplo de uso\n```bash\ncurl http://localhost/\n```"
			},
			"response": [
				{
					"name": "Success Response",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": ["{{base_url}}"],
							"path": [""]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "\"Healthcheck\""
				}
			]
		},
		{
			"name": "User Signup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 201) {",
							"    pm.test(\"Status code is 201\", function () {",
							"        pm.response.to.have.status(201);",
							"    });",
							"    ",
							"    pm.test(\"Response has user data\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('id');",
							"        pm.expect(jsonData).to.have.property('email');",
							"        pm.expect(jsonData).to.have.property('first_name');",
							"        pm.expect(jsonData).to.have.property('last_name');",
							"    });",
							"    ",
							"    // Store email for login test",
							"    var jsonData = pm.response.json();",
							"    pm.environment.set('test_email', jsonData.email);",
							"} else {",
							"    pm.test(\"Error response has detail\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('detail');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\",\n    \"email\": \"test{{$timestamp}}@example.com\",\n    \"city\": \"Test City\",\n    \"country\": \"Test Country\",\n    \"password1\": \"testpass123\",\n    \"password2\": \"testpass123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				},
				"description": "**Registro de nuevos usuarios**\n\nCrea una nueva cuenta de usuario en el sistema.\n\n### Campos requeridos\n- `first_name`: Nombre (1-100 caracteres)\n- `last_name`: Apellido (1-100 caracteres)\n- `email`: Email v√°lido (√∫nico)\n- `password1`: Contrase√±a (m√≠nimo 8 caracteres)\n- `password2`: Confirmaci√≥n de contrase√±a\n\n### Campos opcionales\n- `city`: Ciudad\n- `country`: Pa√≠s\n\n### Respuestas\n- **201 Created**: Usuario creado exitosamente\n- **400 Bad Request**: Datos inv√°lidos o email duplicado\n\n### Validaciones\n- Las contrase√±as deben coincidir\n- El email debe ser √∫nico\n- Todos los campos requeridos deben estar presentes"
			},
			"response": [
				{
					"name": "Success - User Created",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Ana\",\n    \"last_name\": \"Garc√≠a\",\n    \"email\": \"ana@example.com\",\n    \"city\": \"Bogot√°\",\n    \"country\": \"Colombia\",\n    \"password1\": \"mipassword123\",\n    \"password2\": \"mipassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/signup",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "signup"]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": 1,\n  \"first_name\": \"Ana\",\n  \"last_name\": \"Garc√≠a\",\n  \"email\": \"ana@example.com\",\n  \"city\": \"Bogot√°\",\n  \"country\": \"Colombia\"\n}"
				},
				{
					"name": "Error - Password Mismatch",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\",\n    \"email\": \"test@example.com\",\n    \"password1\": \"testpass123\",\n    \"password2\": \"different123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/signup",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "signup"]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"detail\": \"Las contrase√±as no coinciden.\"\n}"
				},
				{
					"name": "Error - Duplicate Email",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Another\",\n    \"last_name\": \"User\",\n    \"email\": \"ana@example.com\",\n    \"password1\": \"testpass123\",\n    \"password2\": \"testpass123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/signup",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "signup"]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"detail\": \"Email ya est√° registrado.\"\n}"
				}
			]
		},
		{
			"name": "User Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    pm.test(\"Status code is 200\", function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"    ",
							"    pm.test(\"Response has token data\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('access_token');",
							"        pm.expect(jsonData).to.have.property('token_type');",
							"        pm.expect(jsonData.token_type).to.eql('bearer');",
							"    });",
							"    ",
							"    // Store token for future requests",
							"    var jsonData = pm.response.json();",
							"    pm.environment.set('access_token', jsonData.access_token);",
							"} else {",
							"    pm.test(\"Error response has detail\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('detail');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{test_email}}\",\n    \"password\": \"testpass123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				},
				"description": "**Autenticaci√≥n de usuarios**\n\nPermite a los usuarios autenticarse y obtener un token JWT.\n\n### Campos requeridos\n- `email`: Email del usuario registrado\n- `password`: Contrase√±a del usuario\n\n### Respuestas\n- **200 OK**: Login exitoso, retorna JWT token\n- **401 Unauthorized**: Credenciales inv√°lidas\n\n### Token JWT\nEl token retornado debe incluirse en requests autenticados:\n```\nAuthorization: Bearer <access_token>\n```\n\n### Duraci√≥n del token\nPor defecto: 1 hora (3600 segundos)"
			},
			"response": [
				{
					"name": "Success - Login OK",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"ana@example.com\",\n    \"password\": \"mipassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJBbmEiLCJleHAiOjE3MzQ1NzEyMDB9.example_jwt_token_here\",\n  \"token_type\": \"bearer\"\n}"
				},
				{
					"name": "Error - Invalid Credentials",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"noexiste@example.com\",\n    \"password\": \"cualquiera\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"detail\": \"Credenciales inv√°lidas.\"\n}"
				},
				{
					"name": "Error - Wrong Password",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"ana@example.com\",\n    \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "auth", "login"]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"detail\": \"Credenciales inv√°lidas.\"\n}"
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "{{base_url}}"
		}
	]
}