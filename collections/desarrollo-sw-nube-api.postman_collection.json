{
	"info": {
		"_postman_id": "desarrollo-sw-nube-api",
		"name": "Desarrollo SW Nube API",
		"description": "API collection for user authentication endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is healthcheck\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Healthcheck\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				},
				"description": "Health check endpoint to verify API is running"
			},
			"response": []
		},
		{
			"name": "User Signup - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response has user data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('email');",
							"    pm.expect(jsonData).to.have.property('first_name');",
							"    pm.expect(jsonData).to.have.property('last_name');",
							"});",
							"",
							"pm.test(\"Email contains timestamp\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.email).to.include('@example.com');",
							"    pm.environment.set('test_email', jsonData.email);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\",\n    \"email\": \"test{{$timestamp}}@example.com\",\n    \"city\": \"Test City\",\n    \"country\": \"Test Country\",\n    \"password1\": \"testpass123\",\n    \"password2\": \"testpass123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				},
				"description": "Create a new user account with valid data"
			},
			"response": []
		},
		{
			"name": "User Signup - Password Mismatch",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message for password mismatch\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.detail).to.include('Las contrase침as no coinciden');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\",\n    \"email\": \"test2@example.com\",\n    \"city\": \"Test City\",\n    \"country\": \"Test Country\",\n    \"password1\": \"testpass123\",\n    \"password2\": \"different123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				},
				"description": "Test signup with mismatched passwords - should return 400 error"
			},
			"response": []
		},
		{
			"name": "User Signup - Duplicate Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message for duplicate email\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.detail).to.include('Email ya est치 registrado');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Another\",\n    \"last_name\": \"User\",\n    \"email\": \"test@example.com\",\n    \"city\": \"Test City\",\n    \"country\": \"Test Country\",\n    \"password1\": \"testpass123\",\n    \"password2\": \"testpass123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"signup"
					]
				},
				"description": "Test signup with existing email - should return 400 error"
			},
			"response": []
		},
		{
			"name": "User Login - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has token data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('access_token');",
							"    pm.expect(jsonData).to.have.property('token_type');",
							"    pm.expect(jsonData.token_type).to.eql('bearer');",
							"});",
							"",
							"pm.test(\"Token is not empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.access_token).to.not.be.empty;",
							"});",
							"",
							"// Store token for future requests",
							"if (pm.response.code === 200) {",
							"    var jsonData = pm.response.json();",
							"    pm.environment.set('access_token', jsonData.access_token);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"{{test_email}}\",\n    \"password\": \"testpass123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				},
				"description": "Login with valid credentials"
			},
			"response": []
		},
		{
			"name": "User Login - Invalid Credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Error message for invalid credentials\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.detail).to.include('Credenciales inv치lidas');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"nonexistent@example.com\",\n    \"password\": \"wrongpass\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				},
				"description": "Test login with invalid credentials - should return 401 error"
			},
			"response": []
		},
		{
			"name": "User Login - Wrong Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Error message for wrong password\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.detail).to.include('Credenciales inv치lidas');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"wrongpassword\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				},
				"description": "Test login with wrong password for existing user - should return 401 error"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "{{base_url}}"
		}
	]
}